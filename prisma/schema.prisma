// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  companyId     String?

  company       Company? @relation(fields: [companyId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id       String @id @default(cuid())
  name     String @unique
  packages Package[]
  invoices Invoice[]
  users    User[]
  price    Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Package {
  id        String @id @default(cuid())
  name      String
  companyId String
  invoiceId String?
  entries   Entry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company  @relation(fields: [companyId], references: [id])
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
}

model Invoice {
  id        String @id @default(cuid())
  number    String @unique
  date      DateTime
  companyId String
  amount    Decimal
  payment   Payment
  paid      Boolean @default(false)
  packages  Package[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company  @relation(fields: [companyId], references: [id])
}

model Entry {
  id        String @id @default(cuid())
  start     DateTime @default(now())
  end       DateTime
  name      String
  packageId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  package   Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
}

enum Payment {
  Paypal
  BankTransfer
}